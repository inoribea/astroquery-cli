name: Build Packages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.get_version.outputs.pkg_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Package Version
        id: get_version
        run: |
          VERSION=""
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "Using version from tag: $VERSION"
          else
            PYPROJECT_VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
            VERSION="${PYPROJECT_VERSION}-$(echo $GITHUB_SHA | cut -c1-7)"
            echo "Using version for branch build: $VERSION"
          fi
          if [[ -z "$VERSION" ]]; then
            echo "Error: Could not determine package version."
            exit 1
          fi
          echo "pkg_version=$VERSION" >> $GITHUB_OUTPUT

  build_wheel:
    needs: determine_version
    runs-on: ubuntu-latest
    outputs:
      wheel_filename: ${{ steps.build_the_wheel.outputs.wheel_filename }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check main package module
        run: |
          echo "Project root structure:"
          ls -l
          if [ ! -d astroquery_cli ]; then
            echo "::error file=build-package.yml::Directory astroquery_cli does not exist."
          fi
          if [ ! -f astroquery_cli/__init__.py ]; then
            echo "::error file=astroquery_cli/__init__.py::Main package module missing __init__.py"
          fi

      - name: Install gettext (for msgfmt)
        run: sudo apt-get update && sudo apt-get install -y gettext


      - name: Compile translations (.po -> .mo)
        run: |
          find locales/*/LC_MESSAGES -name "*.po" | while read po; do
            mo="${po%.po}.mo"
            msgfmt "$po" -o "$mo"
          done

      - name: Build wheel
        id: build_the_wheel
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel
          unzip -l dist/*.whl
          BUILT_WHEEL_FILE=$(ls dist/*.whl 2>/dev/null | head -n 1)
          if [[ -z "$BUILT_WHEEL_FILE" ]]; then
            echo "Error: No wheel file found in dist/"
            exit 1
          fi
          echo "wheel_filename=${BUILT_WHEEL_FILE#dist/}" >> $GITHUB_OUTPUT
          echo "Built wheel: $BUILT_WHEEL_FILE"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist/${{ steps.build_the_wheel.outputs.wheel_filename }}

  build_pacman:
    needs: [determine_version, build_wheel]
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install FPM and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm libarchive-tools
          sudo gem install fpm --no-document

      - name: Run Pacman packaging script
        id: package_script
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          chmod +x .github/scripts/build-pacman.sh
          .github/scripts/build-pacman.sh

      - name: Upload Pacman package artifact
        uses: actions/upload-artifact@v4
        with:
          name: pacman-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  build_deb:
    needs: [determine_version, build_wheel]
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install fpm --no-document

      - name: Run DEB packaging script
        id: package_script
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          chmod +x .github/scripts/build-deb.sh
          .github/scripts/build-deb.sh

      - name: Upload DEB package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  build_rpm:
    needs: [determine_version, build_wheel]
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install fpm --no-document

      - name: Run RPM packaging script
        id: package_script
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          chmod +x .github/scripts/build-rpm.sh
          .github/scripts/build-rpm.sh

      - name: Upload RPM package artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  build_windows:
    needs: [determine_version, build_wheel]
    runs-on: windows-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install required Python packages
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Run Windows packaging script
        id: package_script
        shell: pwsh
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          .github/scripts/build-windows.ps1 -WheelFilename "$env:WHEEL_FILENAME_ENV" -PackageVersion "$env:PKG_VERSION_OVERRIDE"

      - name: Upload Windows package artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  create_release:
    needs: [determine_version, build_pacman, build_deb, build_rpm, build_windows, build_wheel]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Pacman package artifact
        uses: actions/download-artifact@v4
        with:
          name: pacman-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./pacman-artifact
      - name: Download DEB package artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./deb-artifact
      - name: Download RPM package artifact
        uses: actions/download-artifact@v4
        with:
          name: rpm-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./rpm-artifact
      - name: Download Windows package artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./windows-artifact
      - name: Download Python wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: ./wheel-artifact
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./pacman-artifact/${{ needs.build_pacman.outputs.package_name }}
            ./deb-artifact/${{ needs.build_deb.outputs.package_name }}
            ./rpm-artifact/${{ needs.build_rpm.outputs.package_name }}
            ./windows-artifact/${{ needs.build_windows.outputs.package_name }}
            ./wheel-artifact/${{ needs.build_wheel.outputs.wheel_filename }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.
            ## Available Packages:
            
            - Pacman (Arch): `${{ needs.build_pacman.outputs.package_name }}`
            - Debian/Ubuntu (.deb): `${{ needs.build_deb.outputs.package_name }}`
            - RPM (.rpm): `${{ needs.build_rpm.outputs.package_name }}`
            - Windows Installer (.exe): `${{ needs.build_windows.outputs.package_name }}`
            - Python Wheel (.whl): `${{ needs.build_wheel.outputs.wheel_filename }}`