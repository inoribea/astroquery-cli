name: Build Packages

on:
  push:
    branches:
      - main # Or your default branch
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.3.4
  workflow_dispatch: # Allow manual trigger

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.get_version.outputs.pkg_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Package Version
        id: get_version
        run: |
          VERSION=""
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "Using version from tag: $VERSION"
          else
            # For branch builds, use version from pyproject.toml and append short commit SHA
            PYPROJECT_VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
            VERSION="${PYPROJECT_VERSION}-$(echo $GITHUB_SHA | cut -c1-7)"
            echo "Using version for branch build: $VERSION"
          fi
          if [[ -z "$VERSION" ]]; then
            echo "Error: Could not determine package version."
            exit 1
          fi
          echo "pkg_version=$VERSION" >> $GITHUB_OUTPUT

  build_wheel:
    needs: determine_version
    runs-on: ubuntu-latest
    outputs:
      wheel_filename: ${{ steps.build_the_wheel.outputs.wheel_filename }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Specify your desired Python version

      - name: Install Python build dependencies and build wheel
        id: build_the_wheel
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel
          # Find the generated wheel file (assuming one py3-none-any wheel)
          BUILT_WHEEL_FILE=$(ls dist/*-py3-none-any.whl 2>/dev/null | head -n 1)
          if [[ -z "$BUILT_WHEEL_FILE" ]]; then
            echo "Error: No wheel file found in dist/ matching pattern *-py3-none-any.whl"
            ls -R dist/
            exit 1
          fi
          echo "wheel_filename=${BUILT_WHEEL_FILE#dist/}" >> $GITHUB_OUTPUT
          echo "Built wheel: $BUILT_WHEEL_FILE"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist/${{ steps.build_the_wheel.outputs.wheel_filename }} # Upload the specific wheel

  build_pacman:
    needs: [determine_version, build_wheel]
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install fpm --no-document

      - name: Run Pacman packaging script
        id: package_script
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          chmod +x .github/scripts/build-pacman.sh
          .github/scripts/build-pacman.sh

      - name: Upload Pacman package artifact
        uses: actions/upload-artifact@v4
        with:
          name: pacman-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  build_deb:
    needs: [determine_version, build_wheel]
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_script.outputs.package_name }}
      package_path: ${{ steps.package_script.outputs.package_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel-${{ needs.determine_version.outputs.pkg_version }}
          path: dist

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install fpm --no-document

      - name: Run DEB packaging script
        id: package_script
        env:
          PKG_VERSION_OVERRIDE: ${{ needs.determine_version.outputs.pkg_version }}
          WHEEL_FILENAME_ENV: ${{ needs.build_wheel.outputs.wheel_filename }}
        run: |
          chmod +x .github/scripts/build-deb.sh
          .github/scripts/build-deb.sh

      - name: Upload DEB package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ${{ steps.package_script.outputs.package_path }}
          retention-days: 7

  create_release:
    needs: [determine_version, build_pacman, build_deb]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release and upload assets
    steps:
      - name: Download Pacman package artifact
        uses: actions/download-artifact@v4
        with:
          name: pacman-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./pacman-artifact

      - name: Download DEB package artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package-${{ needs.determine_version.outputs.pkg_version }}
          path: ./deb-artifact

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./pacman-artifact/${{ needs.build_pacman.outputs.package_name }}
            ./deb-artifact/${{ needs.build_deb.outputs.package_name }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.

            Packages included:
            - Pacman: `${{ needs.build_pacman.outputs.package_name }}`
            - Debian: `${{ needs.build_deb.outputs.package_name }}`
          # draft: false # Set to true if you want to create draft releases
          # prerelease: false # Set to true if this is a pre-release
